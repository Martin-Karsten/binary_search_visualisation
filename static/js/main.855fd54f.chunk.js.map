{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","arr","x","_useState","useState","Array","fill","map","e","i","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","subData","setSubData","_useState5","_useState6","num","setNum","_useState7","Math","floor","length","_useState8","mid","setMid","_useState9","_useState10","res","setRes","getClassName","d","react_default","a","createElement","className","es","flipKey","join","onClick","shuffle","toConsumableArray","sort","b","start","end","timer","setInterval","filter","n","clearInterval","type","value","onChange","event","target","key","flipId","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.855fd54f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\nimport shuffle from \"lodash.shuffle\";\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState(Array(20).fill().map((e,i)=>i+1));\n  const [subData, setSubData] = useState(Array(20).fill().map((e,i)=>i+1));\n  const [num, setNum] = useState(12);\n  const [mid, setMid] = useState(Math.floor(data.length/2))\n  const [res, setRes] = useState()\n  const shuffleList = () => setData(shuffle(data));\n\n  const getClassName = (d, num) => {\n    if(d === num)\n      return 'target'\n\n    else if(d === mid)\n      return 'mid'\n    else \n      return 'listItem'\n  }\n  const changeNum = (event) => {\n    setNum(event.target.value)\n  }\n\n  const sortList = () => setData([...data].sort((a,b) => a - b));\n\n  const resetList = () => {\n    setData(Array(20).fill().map((e,i)=>i+1))\n    setSubData(Array(20).fill().map((e,i)=>i+1))\n  }\n\n  const binarySearchIt = (arr, x) => e => {\n    let start=0, end=arr.length; \n    // Iterate while start not meets end \n\n    let timer = setInterval(() => {\n      // Find the mid index \n      let mid=Math.floor((start + end)/2); \n      setMid(mid)\n  \n      // If element is present at mid, return True \n      if (arr[mid]===x) {\n        setSubData(data.filter(n => n === x))\n        setRes(x); \n        clearInterval(timer);\n      }\n\n      // Else look in left or right half accordingly \n      else if (arr[mid] < x){\n        start = mid + 1; \n        setMid(data[mid+1])\n        setSubData(data.filter(n => n >= mid ))\n      }\n      else{\n        end = mid - 1; \n        setMid(data[mid-1])\n        setSubData(data.filter(n => n >= mid ))\n      }\n      if (start > end) {\n        clearInterval(timer);\n      }\n    }, 1250);\n\n   \n    return setRes('does not exist'); \n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Binary search</h1>\n      <h2>Time space complexity O(log n)</h2>\n      <h3>Best case O(1), if <span className=\"target-text\">target</span> = <span className=\"mid-text\">mid</span></h3>\n      <Flipper flipKey={data.join(\"\")}>\n        <button className=\"button\" onClick={shuffleList}>Shuffle</button>\n        <button className=\"button\" onClick={sortList}>Sort</button>\n        <button className=\"button\" onClick={binarySearchIt(data, num)}>Search</button>\n        <button className=\"button\" onClick={resetList}>Reset</button>\n        <h3>Number to search <input type=\"text\" value={num} onChange={changeNum} /></h3>\n        {res}\n        <ul className=\"list\">\n          {data.map(d => (\n            <Flipped key={d} flipId={d}>\n              <li className={getClassName(d, num)} id={d}>{d}</li>\n            </Flipped>\n          ))}\n        </ul>\n        <ul className=\"list\">\n          {subData.map(d => (\n            <Flipped key={d} flipId={d}>\n              <li className={getClassName(d, num)} id={d}>{d}</li>\n            </Flipped>\n          ))}\n        </ul>\n      </Flipper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}